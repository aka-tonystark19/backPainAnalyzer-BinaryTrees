#BlueJ class context
comment0.target=ArrayBinaryTree
comment0.text=\r\n\ ArrayBinaryTree\ implements\ the\ BinaryTreeADT\ interface\ using\ an\ array.\r\n\r\n\ @author\ Java\ Foundations\r\n\ @version\ 4.0\r\n
comment1.params=
comment1.target=ArrayBinaryTree()
comment1.text=\r\n\ Creates\ an\ empty\ binary\ tree.\r\n
comment10.params=
comment10.target=java.util.Iterator\ iterator()
comment10.text=\r\n\ Returns\ an\ iterator\ over\ the\ elements\ of\ this\ binary\ tree\ using\r\n\ the\ iteratorInOrder\ method\r\n\r\n\ @return\ an\ iterator\ over\ the\ binary\ tree\r\n
comment11.params=
comment11.target=java.util.Iterator\ iteratorInOrder()
comment11.text=\r\n\ Performs\ an\ inorder\ traversal\ on\ this\ binary\ tree\ by\ calling\ an\r\n\ overloaded,\ recursive\ inorder\ method\ that\ starts\ with\r\n\ the\ root.\r\n\r\n\ @return\ an\ iterator\ over\ the\ binary\ tree\r\n
comment12.params=node\ tempList
comment12.target=void\ inOrder(int,\ ArrayUnorderedList)
comment12.text=\r\n\ Performs\ a\ recursive\ inorder\ traversal.\r\n\r\n\ @param\ node\ the\ index\ of\ the\ node\ used\ in\ the\ traversal\r\n\ @param\ tempList\ the\ temporary\ list\ used\ in\ the\ traversal\r\n
comment13.params=
comment13.target=java.util.Iterator\ iteratorPreOrder()
comment13.text=\r\n\ Performs\ an\ preorder\ traversal\ on\ this\ binary\ tree\ by\ calling\ an\r\n\ overloaded,\ recursive\ preorder\ method\ that\ starts\ with\r\n\ the\ root.\r\n\ \r\n\ @return\ an\ iterator\ over\ the\ binary\ tree\r\n
comment14.params=node\ tempList
comment14.target=void\ preOrder(int,\ ArrayUnorderedList)
comment14.text=\r\n\ Performs\ a\ recursive\ preorder\ traversal.\r\n\r\n\ @param\ node\ the\ index\ of\ the\ node\ used\ in\ the\ traversal\r\n\ @param\ tempList\ the\ temporary\ list\ used\ in\ the\ traversal\r\n
comment15.params=
comment15.target=java.util.Iterator\ iteratorPostOrder()
comment15.text=\r\n\ Performs\ an\ postorder\ traversal\ on\ the\ binary\ tree\ by\ calling\r\n\ an\ overloaded,\ recursive\ postorder\ method\ that\ starts\r\n\ with\ the\ root.\r\n\ \r\n\ @return\ an\ iterator\ over\ the\ binary\ tree\r\n
comment16.params=node\ tempList
comment16.target=void\ postOrder(int,\ ArrayUnorderedList)
comment16.text=\r\n\ Performs\ a\ recursive\ postorder\ traversal.\r\n\ \r\n\ @param\ node\ the\ index\ of\ the\ node\ used\ in\ the\ traversal\r\n\ @param\ tempList\ the\ temporary\ list\ used\ in\ the\ traversal\r\n
comment17.params=
comment17.target=java.util.Iterator\ iteratorLevelOrder()
comment17.text=\r\n\ Performs\ a\ levelorder\ traversal\ on\ this\ binary\ tree,\ using\ a\r\n\ tempList.\r\n\r\n\ @return\ an\ iterator\ over\ the\ binary\ tree\r\n
comment2.params=element
comment2.target=ArrayBinaryTree(java.lang.Object)
comment2.text=\r\n\ Creates\ a\ binary\ tree\ with\ the\ specified\ element\ as\ its\ root.\r\n\r\n\ @param\ element\ the\ element\ which\ will\ become\ the\ root\ of\ the\ new\ tree\r\n
comment3.params=
comment3.target=void\ expandCapacity()
comment3.text=\r\n\ Private\ method\ to\ expand\ capacity\ if\ full.\r\n
comment4.params=
comment4.target=java.lang.Object\ getRootElement()
comment4.text=\r\n\ Returns\ the\ root\ element\ of\ the\ tree.\r\n\r\n\ @return\ element\ stored\ at\ the\ root\r\n\ @throws\ EmptyCollectionException\ if\ the\ tree\ is\ empty\r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ Returns\ true\ if\ this\ binary\ tree\ is\ empty\ and\ false\ otherwise.\r\n\ \r\n\ @return\ true\ if\ this\ binary\ tree\ is\ empty,\ false\ otherwise\r\n
comment6.params=
comment6.target=int\ size()
comment6.text=\r\n\ Returns\ the\ integer\ size\ of\ this\ binary\ tree.\r\n\r\n\ @return\ the\ integer\ size\ of\ this\ binary\ tree\r\n
comment7.params=targetElement
comment7.target=boolean\ contains(java.lang.Object)
comment7.text=\r\n\ Returns\ true\ if\ this\ tree\ contains\ an\ element\ that\ matches\ the\r\n\ specified\ target\ element\ and\ false\ otherwise.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ tree\r\n\ @return\ true\ if\ the\ element\ is\ in\ this\ tree\r\n
comment8.params=targetElement
comment8.target=java.lang.Object\ find(java.lang.Object)
comment8.text=\r\n\ Returns\ a\ reference\ to\ the\ specified\ target\ element\ if\ it\ is\r\n\ found\ in\ this\ binary\ tree.\ \ Throws\ a\ ElementNotFoundException\ if\r\n\ the\ specified\ target\ element\ is\ not\ found\ in\ the\ binary\ tree.\r\n\r\n\ @param\ targetElement\ the\ element\ being\ sought\ in\ the\ tree\r\n\ @return\ true\ if\ the\ element\ is\ in\ the\ tree\r\n\ @throws\ ElementNotFoundException\ if\ the\ element\ is\ not\ in\ the\ tree\r\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ binary\ tree\ showing\r\n\ the\ nodes\ in\ an\ inorder\ fashion.\r\n\r\n\ @return\ a\ string\ representation\ of\ the\ binary\ tree\r\n
numComments=18
