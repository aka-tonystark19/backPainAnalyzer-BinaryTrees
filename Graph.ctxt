#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ Graph\ represents\ an\ adjacency\ matrix\ implementation\ of\ a\ graph.\r\n\r\n\ @author\ Java\ Foundations\r\n\ @version\ 4.0\r\n
comment1.params=
comment1.target=Graph()
comment1.text=\r\n\ Creates\ an\ empty\ graph.\r\n
comment10.params=index
comment10.target=void\ adjustAdjMatrix(int)
comment11.params=startIndex
comment11.target=java.util.Iterator\ iteratorDFS(int)
comment11.text=\r\n\ Returns\ an\ iterator\ that\ performs\ a\ depth\ first\ traversal\ \r\n\ starting\ at\ the\ given\ index.\r\n\r\n\ @param\ startIndex\ the\ index\ from\ which\ to\ begin\ the\ traversal\r\n\ @return\ an\ iterator\ that\ performs\ a\ depth\ first\ traversal\r\n
comment12.params=startVertex
comment12.target=java.util.Iterator\ iteratorDFS(java.lang.Object)
comment12.text=\r\n\ Returns\ an\ iterator\ that\ performs\ a\ depth\ first\ search\ \r\n\ traversal\ starting\ at\ the\ given\ vertex.\r\n\r\n\ @param\ startVertex\ the\ vertex\ to\ begin\ the\ search\ from\r\n\ @return\ an\ iterator\ that\ performs\ a\ depth\ first\ traversal\r\n
comment13.params=startIndex
comment13.target=java.util.Iterator\ iteratorBFS(int)
comment13.text=\r\n\ Returns\ an\ iterator\ that\ performs\ a\ breadth\ first\ \ \r\n\ traversal\ starting\ at\ the\ given\ index.\r\n\r\n\ @param\ startIndex\ the\ index\ from\ which\ to\ begin\ the\ traversal\r\n\ @return\ an\ iterator\ that\ performs\ a\ breadth\ first\ traversal\r\n
comment14.params=startVertex
comment14.target=java.util.Iterator\ iteratorBFS(java.lang.Object)
comment14.text=\r\n\ Returns\ an\ iterator\ that\ performs\ a\ breadth\ first\ search\ \r\n\ traversal\ starting\ at\ the\ given\ vertex.\r\n\r\n\ @param\ startVertex\ the\ vertex\ to\ begin\ the\ search\ from\r\n\ @return\ an\ iterator\ that\ performs\ a\ breadth\ first\ traversal\r\n
comment15.params=startIndex\ targetIndex
comment15.target=java.util.Iterator\ iteratorShortestPathIndices(int,\ int)
comment15.text=\r\n\ Returns\ an\ iterator\ that\ contains\ the\ indices\ of\ the\ vertices\ \r\n\ that\ are\ in\ the\ shortest\ path\ between\ the\ two\ given\ vertices.\r\n\r\n\ @param\ startIndex\ the\ starting\ index\r\n\ @param\ targetIndex\ the\ the\ target\ index\r\n\ @return\ the\ an\ iterator\ containing\ the\ indices\ of\ the\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ vertices\ making\ the\ shortest\ path\ between\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ indices\r\n
comment16.params=startIndex\ targetIndex
comment16.target=java.util.Iterator\ iteratorShortestPath(int,\ int)
comment16.text=\r\n\ Returns\ an\ iterator\ that\ contains\ the\ shortest\ path\ between\r\n\ the\ two\ vertices.\r\n\r\n\ @param\ startIndex\ the\ starting\ index\r\n\ @param\ targetIndex\ the\ target\ index\r\n\ @return\ an\ iterator\ that\ contains\ the\ shortest\ path\r\n\ \ \ \ \ \ \ \ \ \ \ between\ the\ given\ vertices\r\n
comment17.params=startVertex\ targetVertex
comment17.target=java.util.Iterator\ iteratorShortestPath(java.lang.Object,\ java.lang.Object)
comment17.text=\r\n\ Returns\ an\ iterator\ that\ contains\ the\ shortest\ path\ between\r\n\ the\ two\ vertices.\r\n\r\n\ @param\ startVertex\ the\ starting\ vertex\r\n\ @param\ targetVertex\ the\ target\ vertex\r\n\ @return\ an\ iterator\ that\ contains\ the\ shortest\ path\ between\r\n\ \ \ \ \ \ \ \ \ the\ given\ vertices\r\n
comment18.params=startIndex\ targetIndex
comment18.target=int\ shortestPathLength(int,\ int)
comment18.text=\r\n\ Returns\ the\ weight\ of\ the\ least\ weight\ path\ in\ the\ network.\ \ \r\n\ Returns\ positive\ infinity\ if\ no\ path\ is\ found.\r\n\r\n\ @param\ startIndex\ the\ starting\ index\r\n\ @param\ targetIndex\ the\ target\ index\r\n\ @return\ the\ integer\ weight\ of\ the\ least\ weight\ path\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ the\ network\r\n
comment19.params=startVertex\ targetVertex
comment19.target=int\ shortestPathLength(java.lang.Object,\ java.lang.Object)
comment19.text=\r\n\ Returns\ the\ weight\ of\ the\ least\ weight\ path\ in\ the\ network.\ \ \r\n\ Returns\ positive\ infinity\ if\ no\ path\ is\ found.\r\n\r\n\ @param\ startVertex\ the\ starting\ vertex\r\n\ @param\ targetVertex\ the\ target\ vertex\r\n\ @return\ the\ integer\ weight\ of\ the\ least\ weight\ path\r\n\ \ \ \ \ \ \ \ \ \ \ \ in\ the\ network\r\n
comment2.params=vertex1\ vertex2
comment2.target=void\ addEdge(java.lang.Object,\ java.lang.Object)
comment2.text=\r\n\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\r\n\ @param\ vertex1\ \ the\ first\ vertex\r\n\ @param\ vertex2\ \ the\ second\ vertex\r\n
comment20.params=
comment20.target=Graph\ getMST()
comment20.text=\r\n\ Returns\ a\ minimum\ spanning\ tree\ of\ the\ graph.\r\n\r\n\ @return\ a\ minimum\ spanning\ tree\ of\ the\ graph\r\n
comment21.params=
comment21.target=void\ expandCapacity()
comment21.text=\r\n\ Creates\ new\ arrays\ to\ store\ the\ contents\ of\ the\ graph\ with\r\n\ twice\ the\ capacity.\r\n
comment22.params=
comment22.target=int\ size()
comment22.text=\r\n\ Returns\ the\ number\ of\ vertices\ in\ the\ graph.\r\n\r\n\ @return\ the\ integer\ number\ of\ vertices\ in\ the\ graph\r\n
comment23.params=
comment23.target=boolean\ isEmpty()
comment23.text=\r\n\ Returns\ true\ if\ the\ graph\ is\ empty\ and\ false\ otherwise.\ \r\n\r\n\ @return\ true\ if\ the\ graph\ is\ empty\r\n
comment24.params=
comment24.target=boolean\ isConnected()
comment24.text=\r\n\ Returns\ true\ if\ the\ graph\ is\ connected\ and\ false\ otherwise.\ \r\n\r\n\ @return\ true\ if\ the\ graph\ is\ connected\r\n
comment25.params=vertex
comment25.target=int\ getIndex(java.lang.Object)
comment25.text=\r\n\ Returns\ the\ index\ value\ of\ the\ first\ occurrence\ of\ the\ vertex.\r\n\ Returns\ -1\ if\ the\ key\ is\ not\ found.\r\n\r\n\ @param\ vertex\ the\ vertex\ whose\ index\ value\ is\ being\ sought\r\n\ @return\ the\ index\ value\ of\ the\ given\ vertex\r\n
comment26.params=index
comment26.target=boolean\ indexIsValid(int)
comment26.text=\r\n\ Returns\ true\ if\ the\ given\ index\ is\ valid.\ \r\n\r\n\ @param\ index\ the\ index\ whose\ validity\ is\ being\ queried\r\n\ @return\ true\ if\ the\ given\ index\ is\ valid\r\n
comment27.params=
comment27.target=java.lang.Object[]\ getVertices()
comment27.text=\r\n\ Returns\ a\ copy\ of\ the\ vertices\ array.\r\n\r\n\ @return\ a\ copy\ of\ the\ vertices\ array\r\n
comment28.params=
comment28.target=java.lang.String\ toString()
comment28.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ adjacency\ matrix.\ \r\n\r\n\ @return\ \ a\ string\ representation\ of\ the\ adjacency\ matrix\r\n
comment3.params=index1\ index2
comment3.target=void\ addEdge(int,\ int)
comment3.text=\r\n\ Inserts\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\r\n\ @param\ index1\ \ the\ first\ index\r\n\ @param\ index2\ \ the\ second\ index\r\n
comment4.params=vertex1\ vertex2
comment4.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment4.text=\r\n\ Removes\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\r\n\ @param\ vertex1\ \ the\ first\ vertex\r\n\ @param\ vertex2\ \ the\ second\ vertex\r\n
comment5.params=index1\ index2
comment5.target=void\ removeEdge(int,\ int)
comment5.text=\r\n\ Removes\ an\ edge\ between\ two\ vertices\ of\ the\ graph.\r\n\r\n\ @param\ index1\ \ the\ first\ index\r\n\ @param\ index2\ \ the\ second\ index\r\n
comment6.params=
comment6.target=void\ addVertex()
comment6.text=\r\n\ Adds\ a\ vertex\ to\ the\ graph,\ expanding\ the\ capacity\ of\ the\ graph\r\n\ if\ necessary.\r\n
comment7.params=vertex
comment7.target=void\ addVertex(java.lang.Object)
comment7.text=\r\n\ Adds\ a\ vertex\ to\ the\ graph,\ expanding\ the\ capacity\ of\ the\ graph\r\n\ if\ necessary.\ \ It\ also\ associates\ an\ object\ with\ the\ vertex.\r\n\r\n\ @param\ vertex\ \ the\ vertex\ to\ add\ to\ the\ graph\r\n
comment8.params=vertex
comment8.target=void\ removeVertex(java.lang.Object)
comment8.text=\r\n\ Removes\ a\ single\ vertex\ with\ the\ given\ value\ from\ the\ graph.\ \ \r\n\r\n\ @param\ vertex\ \ the\ vertex\ to\ be\ removed\ from\ the\ graph\r\n
comment9.params=index
comment9.target=void\ removeVertex(int)
comment9.text=\r\n\ Removes\ a\ vertex\ at\ the\ given\ index\ from\ the\ graph.\ \ Note\ that\ \r\n\ this\ may\ affect\ the\ index\ values\ of\ other\ vertices.\r\n\r\n\ @param\ index\ \ the\ index\ at\ which\ the\ vertex\ is\ to\ be\ removed\ from\r\n
numComments=29
